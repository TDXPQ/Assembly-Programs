
AVRASM ver. 2.2.7  F:\Fall_2020\ESE_280\Labatory\8\Code\poll_digit_entry\poll_digit_entry\main.asm Fri Oct 30 10:07:07 2020

F:\Fall_2020\ESE_280\Labatory\8\Code\poll_digit_entry\poll_digit_entry\main.asm(20): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m4809def.inc'
F:\Fall_2020\ESE_280\Labatory\8\Code\poll_digit_entry\poll_digit_entry\main.asm(20): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m4809def.inc'
                                 
                                 
                                 ;*
                                 ;* Title: poll_digit_entry
                                 ;* Author: Aditya Jindal
                                 ;* Version: 1.0
                                 ;* Last updated: 10-29-2020
                                 ;* Target: ATmega4809
                                 ;*
                                 ;* DESCRIPTION: user enters digit which is converted and
                                 ;* then displayed to the LED display
                                 ;* 
                                 ;* 
                                 ;*
                                 ;*
                                 ;* VERSION HISTORY
                                 ;* 1.0 Original version
                                 ;****************************************
                                 
                                 .list
                                 
                                 ;define arrays
                                 .dseg
002800                           bcd_entries: .byte 4
002804                           led_display: .byte 4
                                 .cseg
                                 
                                 start:
000000 9880                      	cbi VPORTE_DIR,0 ;PE0 ans push button input
000001 9a81                      	sbi VPORTE_DIR,1 ;PE1 as output
                                 
000002 9889                      	cbi VPORTE_OUT, 1	;clear flip flop
000003 9a89                      	sbi VPORTE_OUT, 1	;stop clearing flip flop
                                 
000004 e010                      	ldi r17,0x00
000005 b910                      	out VPORTA_DIR,r17 ; make PORTA input
                                 
                                 main_loop:
000006 d001                      	rcall poll_digit_entry
000007 cffe                      	rjmp main_loop
                                 
                                 ;*******************************************
                                 ;* 
                                 ;* "poll_digit_entries" - title
                                 ;*
                                 ;* Description: 
                                 ;*
                                 ;* Author: Aditya Jindal
                                 ;* Version: 1.0
                                 ;* Last updated: 10-29-2020
                                 ;* Target: ATmega4809
                                 ;* Number of words: 27
                                 ;* Number of cycles: 282
                                 ;* Low registers modified:
                                 ;* High registers modified: r16,r17,r18,r19,r20,r21
                                 ;*							ZH, ZL, YH, YL
                                 ;*
                                 ;* Parameters: none
                                 ;* Returns: none
                                 ;*
                                 ;* Notes: 
                                 ;*
                                 ;*****************************************
                                 
                                 poll_digit_entry:
000008 9b90                      	sbis VPORTE_IN, 0; wait for button press
000009 9508                      	ret
                                 	
00000a b162                      	in r22, VPORTA_IN	;input values into register 
                                 	
00000b 2f06                      	mov r16, r22
00000c d030                      	rcall reverse_bits
                                 
00000d 302a                      	cpi r18, 10
00000e f4dc                      	brge brnch_grt_equ	;go back to main loop if not < 10
                                 	
00000f e2d8                      	ldi YH, HIGH(bcd_entries)	;set pointer to end of array
000010 e0c0                      	ldi YL, LOW(bcd_entries)	;set pointer to start of array
                                 
                                 	;Put pointer values in register to move array
000011 8138                      	ldd r19,Y+0
000012 8149                      	ldd r20,Y+1
000013 815a                      	ldd r21,Y+2
                                 
                                 	;move the array with r17 beign new value
000014 8368                      	std Y+0 ,r22
000015 8339                      	std Y+1 ,r19
000016 834a                      	std Y+2 ,r20
000017 835b                      	std Y+3 ,r21
                                 
000018 e2b8                      	ldi XH, HIGH(led_display)	;set pointer to end of array
000019 e0a4                      	ldi XL, LOW(led_display)	;set pointer to start of array
                                 
00001a 8108                      	ldd r16, Y+0	;move bcd entry to subroutine input
00001b d021                      	rcall reverse_bits	;call subroutine to reverse r16
00001c d010                      	rcall hex_to_7seg	;call subroutine
00001d 932d                      	st X+ ,r18	;store result in led array
                                 
00001e 8109                      	ldd r16, Y+1	;same as before
00001f d01d                      	rcall reverse_bits
000020 d00c                      	rcall hex_to_7seg
000021 932d                      	st X+ ,r18
                                 
000022 810a                      	ldd r16, Y+2	;same as first
000023 d019                      	rcall reverse_bits
000024 d008                      	rcall hex_to_7seg
000025 932d                      	st X+,r18
                                 
000026 810b                      	ldd r16, Y+3	;same as first
000027 d015                      	rcall reverse_bits
000028 d004                      	rcall hex_to_7seg
000029 932d                      	st X+,r18
                                 
                                 brnch_grt_equ:
00002a 9889                      	cbi VPORTE_OUT, 1	;clear flip flop
00002b 9a89                      	sbi VPORTE_OUT, 1	;stop clearing flip flop
                                 
00002c 9508                      	ret	;return when done
                                 
                                 
                                 ;****************************************
                                 ;* 
                                 ;* "hex_to_7seg" - Hexadecimal to Seven Segment Conversion
                                 ;*
                                 ;* Description: Converts a right justified hexadecimal digit 
                                 ;*to the seven segment pattern required to display it. 
                                 ;*Pattern is right justified a through g. 
                                 ;*Pattern uses 0s to turn segments on ON.
                                 ;*
                                 ;* Author:						Ken Short
                                 ;* Version:						1.0						
                                 ;* Last updated:				101620
                                 ;* Target:						ATmega4809
                                 ;* Number of words:				8
                                 ;* Number of cycles:			13
                                 ;* Low registers modified:		none		
                                 ;* High registers modified:		r16, r18, ZL, ZH
                                 ;*
                                 ;* Parameters: r18: right justified hex digit, high nibble 0
                                 ;* Returns: r18: segment values a through g right justified
                                 ;*
                                 ;* Notes: 
                                 ;*
                                 ;****************************************
                                 
                                 hex_to_7seg:
00002d 702f                      	andi r18, 0x0F				;clear ms nibble
00002e e0f0                          ldi ZH, HIGH(hextable * 2)  ;set Z to point start table
00002f e6ea                          ldi ZL, LOW(hextable * 2)
000030 e000                          ldi r16, $00                ;add offset to Z pointer
000031 0fe2                          add ZL, r18
000032 1ff0                          adc ZH, r16
000033 9124                          lpm r18, Z                  ;load byte from table
000034 9508                      	ret
                                 
                                     ;Table of segment values to display digits 0 - F
                                     ;!!! seven values must be added - verify all values
000035 4f01
000036 0612
000037 244c
000038 0f20
000039 0c00
00003a 6008
00003b 4231
00003c 3830                      hextable: .db $01,$4F,$12,$06,$4C,$24,$20,$0F,$00,$0C,$08,$60,$31,$42,$30,$38
                                 
                                 ;*******************************************************
                                 ;* 
                                 ;* "reverse_bits" - Reverse the order of a registers bits
                                 ;*
                                 ;* Description: Subroutine reverses the order of a register
                                 ;*
                                 ;* Author:						Aditya Jindal
                                 ;* Version:						1.0						
                                 ;* Last updated:				10202020
                                 ;* Target:						ATmega4809
                                 ;* Number of words:				11
                                 ;* Number of cycles:			63
                                 ;* Low registers modified:		none	
                                 ;* High registers modified:		r16, r17, r18, r19
                                 ;*
                                 ;* Parameters: r16: with loaded register value
                                 ;* Returns: r18: reversed register value
                                 ;*
                                 ;* Notes: 
                                 ;*
                                 ;***********************************************************
                                 
                                 reverse_bits:
00003d e018                      	ldi r17, 8		;have a counter
                                 reverse_bit_loop:
00003e 0f00                      	lsl r16			;move r16
00003f 9527                      	ror r18
000040 951a                      	dec r17			;decrement counter
000041 f7e1                      	brne reverse_bit_loop
                                 	


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega4809" register use summary:
x  :   4 y  :  11 z  :   1 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:   8 r17:   4 r18:   9 r19:   2 r20:   2 
r21:   2 r22:   3 r23:   0 r24:   0 r25:   0 r26:   1 r27:   1 r28:   1 
r29:   1 r30:   2 r31:   2 
Registers used: 16 out of 35 (45.7%)

"ATmega4809" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   1 add   :   1 adiw  :   0 and   :   0 
andi  :   1 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   0 brge  :   1 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :   1 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   3 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :   1 cpse  :   0 dec   :   1 des   :   0 eor   :   0 fmul  :   0 
fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   1 inc   :   0 
jmp   :   0 ld    :   0 ldd   :   7 ldi   :   9 lds   :   0 lpm   :   2 
lsl   :   1 lsr   :   0 mov   :   1 movw  :   0 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :   1 
pop   :   0 push  :   0 rcall :  10 ret   :   4 reti  :   0 rjmp  :   1 
rol   :   0 ror   :   1 sbc   :   0 sbci  :   0 sbi   :   3 sbic  :   0 
sbis  :   1 sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :   4 std   :   4 
sts   :   0 sub   :   0 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 

Instructions used: 23 out of 114 (20.2%)

"ATmega4809" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000086    118     16    134   49152   0.3%
[.dseg] 0x002800 0x002808      0      8      8    6144   0.1%
[.eseg] 0x000000 0x000000      0      0      0     256   0.0%

Assembly complete, 0 errors, 0 warnings
