
AVRASM ver. 2.2.7  F:\Fall_2020\ESE_280\Labatory\6\Code\conditional_input_hdwe\conditional_input_hdwe\main.asm Fri Oct 16 10:04:48 2020

F:\Fall_2020\ESE_280\Labatory\6\Code\conditional_input_hdwe\conditional_input_hdwe\main.asm(30): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m4809def.inc'
F:\Fall_2020\ESE_280\Labatory\6\Code\conditional_input_hdwe\conditional_input_hdwe\main.asm(30): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m4809def.inc'
                                 
                                 
                                 ; conditional_input_hdwe.asm
                                 ;
                                 ; Description: The program displays the result of a switch bank
                                 ;	to a bargraph LED, but the updated value is only displayed
                                 ;	when the push button is pressed.
                                 ;
                                 ; Author: Aditya Jindal 112835035
                                 ; Created: 10/10/2020 1:21:44 PM
                                 ;
                                 ; Inputs:
                                 ;	PORTA = Switch ban input.
                                 ;	PORTE PIN0 = Push button input from Flip Flop
                                 ;	PORTE PIN1 = Flip FLop clear
                                 ;
                                 ; Outputs:
                                 ;	PortD = Bargraph LED output port.
                                 ;
                                 ; Register Assignments/Purpose
                                 ;	r16 = GP = general purpose, assign initial port conditions
                                 ;		= used to read in switch values and output LED values
                                 ;
                                 ; Registers altered: r16
                                 ;
                                 ; Section no.: 4
                                 ; Experiment no.: 5
                                 ; Bench no.: 7
                                 
                                 .list
                                 
                                 ; Task 2
                                 start:
000000 e000                          ldi r16, 0x00		;load with all zeros
000001 b900                      	out VPORTA_DIR, r16	;PORTA - all pins configured as inputs
                                 	
000002 ef0f                      	ldi r16, 0xFF		
000003 b90c                      	out VPORTD_DIR, r16	;set output port.
                                 
000004 b90d                      	out VPORTD_OUT, r16	;output inital counter value to the LEDs
                                 
000005 9880                      	cbi VPORTE_DIR, 0	;Set input pin for flip flop
000006 9a81                      	sbi VPORTE_DIR, 1	;set flip flop clear, asserted low
                                 
000007 9889                      	cbi VPORTE_OUT, 1	;clear flip flop
000008 9a89                      	sbi VPORTE_OUT, 1	;stop clearing flip flop
                                 
                                 main_loop:
000009 9b90                      	sbis VPORTE_IN, 0	;skips if push button is pressed
00000a cffe                      	rjmp main_loop		;while button not pushed loop
                                 
00000b b102                      	in r16, VPORTA_IN	;read switch values
00000c 9500                      	com r16				;complement switch values to drive LEDs
00000d b90d                      	out VPORTD_OUT, r16	;output to LEDs complement input
                                 
00000e 9889                      	cbi VPORTE_OUT, 1	;clear flip flop
00000f 9a89                      	sbi VPORTE_OUT, 1	;stop clearing flip flop
                                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega4809" register use summary:
x  :   0 y  :   0 z  :   0 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:   8 r17:   0 r18:   0 r19:   0 r20:   0 
r21:   0 r22:   0 r23:   0 r24:   0 r25:   0 r26:   0 r27:   0 r28:   0 
r29:   0 r30:   0 r31:   0 
Registers used: 1 out of 35 (2.9%)

"ATmega4809" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   0 adiw  :   0 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   0 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :   0 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   3 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   1 cp    :   0 cpc   :   0 
cpi   :   0 cpse  :   0 dec   :   0 des   :   0 eor   :   0 fmul  :   0 
fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   1 inc   :   0 
jmp   :   0 ld    :   0 ldd   :   0 ldi   :   2 lds   :   0 lpm   :   0 
lsl   :   0 lsr   :   0 mov   :   0 movw  :   0 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :   4 
pop   :   0 push  :   0 rcall :   0 ret   :   0 reti  :   0 rjmp  :   2 
rol   :   0 ror   :   0 sbc   :   0 sbci  :   0 sbi   :   3 sbic  :   0 
sbis  :   1 sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 
sts   :   0 sub   :   0 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 

Instructions used: 8 out of 114 (7.0%)

"ATmega4809" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000022     34      0     34   49152   0.1%
[.dseg] 0x002800 0x002800      0      0      0    6144   0.0%
[.eseg] 0x000000 0x000000      0      0      0     256   0.0%

Assembly complete, 0 errors, 0 warnings
