
AVRASM ver. 2.2.7  F:\Fall_2020\ESE_280\Labatory\7\Code\display_hex_digit_at_pos\display_hex_digit_at_pos\main.asm Fri Oct 23 10:49:07 2020

F:\Fall_2020\ESE_280\Labatory\7\Code\display_hex_digit_at_pos\display_hex_digit_at_pos\main.asm(34): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m4809def.inc'
F:\Fall_2020\ESE_280\Labatory\7\Code\display_hex_digit_at_pos\display_hex_digit_at_pos\main.asm(34): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m4809def.inc'
                                 
                                 
                                 ; display_hex_digit_at_pos.asm
                                 ;
                                 ; Description: The program conditionally sets
                                 ;	the displays of 4 7-seg displays based
                                 ;	on switch input and a push button
                                 ;
                                 ; Author : Aditya Jindal 112835035
                                 ; Created: 10/20/2020 4:07:40 PM
                                 ;
                                 ; Register Assignments/Purpose
                                 ;	r16 = Initialize Ports and r21-24
                                 ;		= Read in VPORTA
                                 ;		= Used in hex_to_7seg
                                 ;	r17 = Used as a counter in reverse bits
                                 ;	r18 = Used to store reversed bits
                                 ;		= Used in hex_to_7seg
                                 ;		= Used to output to 7seg display
                                 ;	r19 = Used as a mask in reverse bits
                                 ;	r20 = Used to figure out which position ot change
                                 ;	r21 = Store the display value of 0 pos 7-seg display
                                 ;	r22 = Store the display value of 1 pos 7-seg display
                                 ;	r23 = Store the display value of 2 pos 7-seg display
                                 ;	r24 = Store the display value of 3 pos 7-seg display
                                 ;
                                 ; Registers altered: r16, r17, r18, r19,
                                 ;					 r20, r21, r22, r23, r24
                                 ;
                                 ; Section no.: 4
                                 ; Experiment no.: 7
                                 ; Bench no.: 7
                                 
                                 .list
                                 
                                 ; Design Task 3
                                 start:
000000 e000                          ldi r16, 0x00		;load with all zeros
000001 b900                      	out VPORTA_DIR, r16	;Set port A to input.
                                 
000002 ef00                      	ldi r16, 0xF0		;initial Port C
000003 b908                      	out VPORTC_DIR, r16
                                 
000004 ef0f                      	ldi r16, 0xFF		;load with all ones
000005 b90c                      	out VPORTD_DIR, r16	;Set Port D to output
                                 	
000006 9880                      	cbi VPORTE_DIR, 0	;set PE0 to input
000007 9a81                      	sbi VPORTE_DIR, 1	;set flip flop clear, asserted low
                                 
000008 ef0f                      	ldi r16, 0xFF		;set initial output
000009 b90d                      	out VPORTD_OUT, r16 ;turn Port D off
                                 
00000a 9889                      	cbi VPORTE_OUT, 1	;clear flip flop
00000b 9a89                      	sbi VPORTE_OUT, 1	;stop clearing flip flop
                                 	
                                 	;Have registers for the individual 7-seg
00000c 2f50                      	mov r21, r16	;Position 0
00000d 2f60                      	mov r22, r16	;Position 1
00000e 2f70                      	mov r23, r16	;Position 2
00000f 2f80                      	mov r24, r16	;Position 3
                                 
                                 main_loop:
000010 e130                      	ldi r19, 0x10
000011 9530                      	com r19
000012 b95d                      	out VPORTD_OUT, r21	;output the display value
000013 b939                      	out VPORTC_OUT, r19 ;give power to right most 7-seg
000014 d02d                      	rcall var_delay
000015 ef3f                      	ldi r19, 0xFF
                                 
                                 	
000016 e230                      	ldi r19, 0x20
000017 9530                      	com r19
000018 b96d                      	out VPORTD_OUT, r22	;output the display value
000019 b939                      	out VPORTC_OUT, r19 ;give power to right most 7-seg
00001a d027                      	rcall var_delay
00001b ef3f                      	ldi r19, 0xFF
                                 
00001c e430                      	ldi r19, 0x40
00001d 9530                      	com r19
00001e b97d                      	out VPORTD_OUT, r23	;output the display value
00001f b939                      	out VPORTC_OUT, r19 ;give power to right most 7-seg
000020 d021                      	rcall var_delay
000021 ef3f                      	ldi r19, 0xFF
                                 
000022 e830                      	ldi r19, 0x80
000023 9530                      	com r19
000024 b98d                      	out VPORTD_OUT, r24	;output the display value
000025 b939                      	out VPORTC_OUT, r19 ;give power to right most 7-seg
000026 d01b                      	rcall var_delay
000027 ef3f                      	ldi r19, 0xFF
                                 
000028 9b90                      	sbis VPORTE_IN, 0	;skips if push button is pressed
000029 cfe6                      	rjmp main_loop		;push button not pushed causes loop
                                 
00002a b102                      	in r16, VPORTA_IN	;load the switch values
                                 	
00002b d01d                      	rcall reverse_bits	;call subroutine to reverse bits
                                 	
00002c 2f42                      	mov r20, r18		;make copy of r16
00002d 7c40                      	andi r20, 0xC0		;mask r20
                                 	
00002e d020                      	rcall hex_to_7seg	;call the convert sbrt
                                 
                                 	;Copy r18 to the right register
                                 	;Decide which 7-seg need to be changed
00002f 3040                      	cpi r20, 0x00
000030 f049                      	breq change_pos_0
                                 
000031 3440                      	cpi r20, 0x40
000032 f049                      	breq change_pos_1
                                 
000033 3840                      	cpi r20, 0x80
000034 f049                      	breq change_pos_2
                                 
000035 3c40                      	cpi r20, 0xC0
000036 f049                      	breq change_pos_3
                                 
                                 rising_edge:
                                 ;	sbis VPORTE_IN, 0	;skips if the push button is released
                                 ;	rjmp rising_edge	;causes loop while the button is pressed
                                 
000037 9889                      	cbi VPORTE_OUT, 1	;clear flip flop
000038 9a89                      	sbi VPORTE_OUT, 1	;stop clearing flip flop
                                 
000039 cfd6                      	rjmp main_loop
                                 
                                 change_pos_0:	;change right most segment
00003a 2f52                      	mov r21, r18
00003b cffb                      	rjmp rising_edge
                                 
                                 change_pos_1:	;change second right most segment
00003c 2f62                      	mov r22, r18
00003d cff9                      	rjmp rising_edge
                                 
                                 change_pos_2:
00003e 2f72                      	mov r23, r18
00003f cff7                      	rjmp rising_edge
                                 
                                 change_pos_3:	;change left most segment
000040 2f82                      	mov r24, r18
000041 cff5                      	rjmp rising_edge
                                 
                                 var_delay:
000042 e006                      	ldi r16, 6		;load r16 with 1-25ms
                                 outer_loop:
000043 e61e                      	ldi r17, 110		;load r17 with a second delay variable
                                 inner_loop:				;delay for the total decided time.
000044 951a                      	dec r17
000045 f7f1                      	brne inner_loop
000046 950a                      	dec r16
000047 f7d9                      	brne outer_loop
                                 
000048 9508                      	ret
                                 
                                 
                                 ;*******************************************************
                                 ;* 
                                 ;* "reverse_bits" - Reverse the order of a registers bits
                                 ;*
                                 ;* Description: Subroutine reverses the order of a register
                                 ;*
                                 ;* Author:						Aditya Jindal
                                 ;* Version:						1.0						
                                 ;* Last updated:				10202020
                                 ;* Target:						ATmega4809
                                 ;* Number of words:				11
                                 ;* Number of cycles:			63
                                 ;* Low registers modified:		none	
                                 ;* High registers modified:		r16, r17, r18, r19
                                 ;*
                                 ;* Parameters: r16: with loaded register value
                                 ;* Returns: r18: reversed register value
                                 ;*
                                 ;* Notes: 
                                 ;*
                                 ;***********************************************************
                                 
                                 reverse_bits:
000049 e018                      	ldi r17, 8		;have a counter
                                 reverse_bit_loop:
00004a 0f00                      	lsl r16			;move r16
00004b 9527                      	ror r18
00004c 951a                      	dec r17			;decrement counter
00004d f7e1                      	brne reverse_bit_loop
                                 	
00004e 9508                      	ret	;return after counter done
                                 
                                 ;*********************************************************
                                 ;* 
                                 ;* "hex_to_7seg" - Hexadecimal to Seven Segment Conversion
                                 ;*
                                 ;* Description: Converts a right justified hexadecimal digit 
                                 ;*to the seven segment pattern required to display it. 
                                 ;*Pattern is right justified a through g. 
                                 ;*Pattern uses 0s to turn segments on ON.
                                 ;*
                                 ;* Author:						Ken Short
                                 ;* Version:						1.0						
                                 ;* Last updated:				101620
                                 ;* Target:						ATmega4809
                                 ;* Number of words:				8
                                 ;* Number of cycles:			13
                                 ;* Low registers modified:		none		
                                 ;* High registers modified:		r16, r18, ZL, ZH
                                 ;*
                                 ;* Parameters: r18: right justified hex digit, high nibble 0
                                 ;* Returns: r18: segment values a through g right justified
                                 ;*
                                 ;* Notes: 
                                 ;*
                                 ;*************************************************************
                                 
                                 hex_to_7seg:
00004f 702f                      	andi r18, 0x0F				;clear ms nibble
000050 e0f0                          ldi ZH, HIGH(hextable * 2)  ;set Z to point to start of table
000051 eaee                          ldi ZL, LOW(hextable * 2)
000052 e000                          ldi r16, $00                ;add offset to Z pointer
000053 0fe2                          add ZL, r18
000054 1ff0                          adc ZH, r16
000055 9124                          lpm r18, Z                  ;load byte from table pointed by Z
000056 9508                      	ret
                                 
                                     ;Table of segment values to display digits 0 - F
                                     ;!!! seven values must be added - verify all values
000057 4f01
000058 0612
000059 244c
00005a 0f20
00005b 0c00
00005c 6008
00005d 4231
00005e 3830                      hextable: .db $01,$4F,$12,$06,$4C,$24,$20,$0F,$00,$0C,$08,$60,$31,$42,$30,$38


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega4809" register use summary:
x  :   0 y  :   0 z  :   1 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:  18 r17:   4 r18:   9 r19:  16 r20:   6 
r21:   3 r22:   3 r23:   3 r24:   3 r25:   0 r26:   0 r27:   0 r28:   0 
r29:   0 r30:   2 r31:   2 
Registers used: 12 out of 35 (34.3%)

"ATmega4809" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   1 add   :   1 adiw  :   0 and   :   0 
andi  :   2 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   4 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :   3 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   3 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   4 cp    :   0 cpc   :   0 
cpi   :   4 cpse  :   0 dec   :   3 des   :   0 eor   :   0 fmul  :   0 
fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   1 inc   :   0 
jmp   :   0 ld    :   0 ldd   :   0 ldi   :  18 lds   :   0 lpm   :   2 
lsl   :   1 lsr   :   0 mov   :   9 movw  :   0 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :  12 
pop   :   0 push  :   0 rcall :   6 ret   :   3 reti  :   0 rjmp  :   6 
rol   :   0 ror   :   1 sbc   :   0 sbci  :   0 sbi   :   3 sbic  :   0 
sbis  :   1 sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 
sts   :   0 sub   :   0 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 

Instructions used: 21 out of 114 (18.4%)

"ATmega4809" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0000be    174     16    190   49152   0.4%
[.dseg] 0x002800 0x002800      0      0      0    6144   0.0%
[.eseg] 0x000000 0x000000      0      0      0     256   0.0%

Assembly complete, 0 errors, 0 warnings
